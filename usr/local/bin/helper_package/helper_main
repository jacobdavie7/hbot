#!/bin/bash

MAIN_DIR=/usr/local/bin/helper_package/helperModules
#MAIN_DIR=/srv/git/helper/usr/local/bin/helper_package/helperModules

# config
    source $MAIN_DIR/config/config_drawing.sh
    source $MAIN_DIR/config/config_monitors.sh
    source $MAIN_DIR/config/config_monitors_custom.sh
    source $MAIN_DIR/config/config_timezone.sh

        # vpn
            source $MAIN_DIR/config/vpn/config_vpn_home.sh
            source $MAIN_DIR/config/vpn/config_vpn_mobile.sh

# firewalls
    # firewall_support
        source $MAIN_DIR/firewalls/firewall_support/firewall_header.sh
        source $MAIN_DIR/firewalls/firewall_support/firewall_persistentSave.sh
        source $MAIN_DIR/firewalls/firewall_support/firewall_support_allow_local_only.sh
        source $MAIN_DIR/firewalls/firewall_support/firewall_support_reset.sh
        source $MAIN_DIR/firewalls/firewall_support/firewall_v6_support_basic.sh
        source $MAIN_DIR/firewalls/firewall_support/firewall_watcher.sh

    # home_rulesets
        source $MAIN_DIR/firewalls/home_rulesets/firewall_home_lax_in.sh
        source $MAIN_DIR/firewalls/home_rulesets/firewall_home_lax.sh
        source $MAIN_DIR/firewalls/home_rulesets/firewall_home_limited_no_local_vm.sh
        source $MAIN_DIR/firewalls/home_rulesets/firewall_home_limited.sh
        source $MAIN_DIR/firewalls/home_rulesets/firewall_home_limited_vpn.sh
        source $MAIN_DIR/firewalls/home_rulesets/firewall_home_secure.sh
        source $MAIN_DIR/firewalls/home_rulesets/firewall_home.sh
    # server_rulesets
        source $MAIN_DIR/firewalls/server_rulesets/firewall_server_backup.sh
        source $MAIN_DIR/firewalls/server_rulesets/firewall_server_web.sh
        source $MAIN_DIR/firewalls/server_rulesets/firewall_server_wol.sh

# general
    source $MAIN_DIR/general/general_updater.sh
    source $MAIN_DIR/general/general_xfceFix.sh
    source $MAIN_DIR/general/general_clean.sh

# special
    source $MAIN_DIR/special/special_debian_ver_upgrade.sh
    source $MAIN_DIR/special/special_install.sh
    source $MAIN_DIR/special/special_startup.sh

# support
    source $MAIN_DIR/support/support_usage.sh
    source $MAIN_DIR/support/support_runSudo.sh
    source $MAIN_DIR/support/support_elevateCheck.sh
    source $MAIN_DIR/support/support_userAccount.sh
    
while getopts "umdsf:iwav:xct:g" FLAG; do
    case "$FLAG" in
        u)
            support_elevateCheck
            general_updater
            exit
            ;;

        m)
            config_monitors
            exit
            ;;

        d)
            config_drawing
            exit
            ;;

        s)
            support_elevateCheck
            special_startup
            exit
            ;;

        f)
            support_elevateCheck
            support_userAccount
            if [ "$OPTARG" == "home" ]; then
                firewall_home
            elif [ "$OPTARG" == "web" ]; then
                firewall_server_web
            elif [ "$OPTARG" == "backup" ]; then
                firewall_server_backup
            elif [ "$OPTARG" == "limited" ]; then
                firewall_home_limited
            elif [ "$OPTARG" == "reset" ]; then
                firewall_support_reset
            elif [ "$OPTARG" == "lax" ]; then
                firewall_home_lax
            elif [ "$OPTARG" == "lax_in" ]; then
                firewall_home_lax_in
            elif [ "$OPTARG" == "local" ]; then
                firewall_support_allow_local_only
            elif [ "$OPTARG" == "secure" ]; then
                firewall_home_secure
            elif [ "$OPTARG" == "wol" ]; then
                firewall_server_wol
            elif [ "$OPTARG" == "vm" ]; then
                firewall_home_limited_no_local_vm
            else
                echo -e "\n\e[31mSorry, but '$OPTARG' is not a valid argument. See valid Arugments for option 'firewall' below\e[39m"
                support_usage
            fi
            exit
            ;;

        i)
            support_elevateCheck
            support_userAccount
            special_install
            exit
            ;;

        w)
            support_elevateCheck
            firewall_watcher
            exit
            ;;

        x)
            support_userAccount
            general_xfceFix
            exit
            ;;

        v)
            support_elevateCheck    #needed for firewall
            if [ "$OPTARG" == "home" ]; then
                config_vpn_home
            elif [ "$OPTARG" == "mobile" ]; then
                config_vpn_mobile
            else
                echo -e "\n\e[31mSorry, but '$OPTARG' is not a valid argument. See valid Arugments for option 'vpn' below\e[39m"
                support_usage
            fi
            exit
            ;;

        c)
            support_elevateCheck
            support_userAccount
            general_clean
            exit
            ;;

        t)
            support_elevateCheck
            if [ "$OPTARG" == "pacific" ]; then
                config_timezonePacific
            exit
            elif [ "$OPTARG" == "mountain" ]; then
                config_timezoneMountain
            exit
            elif [ "$OPTARG" == "central" ]; then
                config_timezoneCentral
            exit
            elif [ "$OPTARG" == "eastern" ]; then
                config_timezoneEastern
            exit
            elif [ "$OPTARG" == "arizona" ]; then
                config_timezoneArizona
            exit
            elif [ "$OPTARG" == "korea" ]; then
                config_timezoneKorea
            exit
            elif [ "$OPTARG" == "auto" ]; then
                config_timezoneAuto
            exit
            else
                echo -e "\n\e[31mSorry, but '$OPTARG' is not a valid argument. See valid Arugments for option 'timezone' below\e[39m"
                support_usage
            fi
            exit
            ;;
    esac
done

support_usage